{"ast":null,"code":"import { catchError } from \"rxjs/operators\";\nimport { environment } from \"../../environments/environment\";\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.URL; // Replace with your API URL\n    }\n\n    testInterceptor(username, password) {\n      return this.http.post(`${this.apiUrl}/testInterceptor`, {\n        username,\n        password\n      }).toPromise();\n    }\n    getAllPatients() {\n      if (!environment.production) {\n        const data = environment.mock.rest.patientListMock;\n        return of(data);\n      }\n      return this.http.get(`${this.apiUrl}/patient`);\n    }\n    authenticate(email, password) {\n      // if (!environment.production) {\n      //   return of({access_token: '123'});\n      // }\n      return this.http.post(`${this.apiUrl}/auth/authenticate`, {\n        email,\n        password\n      }).pipe(catchError(error => {\n        // Handle error accordingly\n        console.error('Login error', error);\n        throw error; // Rethrow the error to be caught in the effect\n      }));\n    }\n\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}