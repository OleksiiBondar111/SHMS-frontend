{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { login, loginFailure, loginSuccess, logout } from \"../actions/auth.actions\";\nimport { catchError, map, switchMap, take, tap } from \"rxjs/operators\";\nimport { from, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../../services/auth.service\";\nimport * as i3 from \"../../../services/auto-logout.service\";\nimport * as i4 from \"@angular/router\";\nexport let AuthEffects = /*#__PURE__*/(() => {\n  class AuthEffects {\n    constructor(actions$, authService, autoLogoutService, router) {\n      this.actions$ = actions$;\n      this.authService = authService;\n      this.autoLogoutService = autoLogoutService;\n      this.router = router;\n      // mergeMap vs switchMap ???\n      this.login$ = createEffect(() => this.actions$.pipe(ofType(login), tap(l => console.log(\"actions$: \", l)),\n      // take(1),\n      switchMap(action => from(this.authService.authenticate(action.username, action.password)).pipe(tap(r => console.log(\"login$\", r)), map(response => loginSuccess({\n        access_token: response.access_token\n      })), catchError(error => of(loginFailure({\n        error: error.message\n      })))))));\n      this.loginSuccess$ = createEffect(() => this.actions$.pipe(ofType(loginSuccess), take(1), tap(() => {\n        // this.autoLogoutService.startMonitoring();\n        console.log(\"login success\");\n        this.router.navigate(['/dashboard']); // Navigate to the dashboard on successful login\n      })), {\n        dispatch: false\n      });\n      this.logOut$ = createEffect(() => this.actions$.pipe(ofType(logout), tap(() => {\n        console.log(\"logOut$ success\");\n        this.router.navigate(['/login']); // Navigate to the dashboard on successful login\n      })), {\n        dispatch: false\n      });\n    }\n    static {\n      this.ɵfac = function AuthEffects_Factory(t) {\n        return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.AutoLogoutService), i0.ɵɵinject(i4.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthEffects,\n        factory: AuthEffects.ɵfac\n      });\n    }\n  }\n  return AuthEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}