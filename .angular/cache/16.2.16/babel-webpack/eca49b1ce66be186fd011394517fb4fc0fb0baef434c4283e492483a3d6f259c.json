{"ast":null,"code":"import { selectToken } from \"../auth.selectors\";\nimport { switchMap } from \"rxjs/operators\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(store) {\n      this.store = store;\n      this.authURls = [environment.URL + \"/auth/register\", environment.URL + \"/auth/authenticate\"];\n    }\n    intercept(request, next) {\n      if (this.authURls.includes(request.url)) {\n        console.log(\"intercept request.url: \", request.url);\n        return next.handle(request);\n      }\n      return this.store.select(selectToken).pipe(switchMap(token => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n        }\n        return next.handle(request);\n      }));\n    }\n    static {\n      this.ɵfac = function AuthInterceptor_Factory(t) {\n        return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Store));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthInterceptor,\n        factory: AuthInterceptor.ɵfac\n      });\n    }\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}